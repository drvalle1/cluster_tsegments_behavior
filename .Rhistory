nomes=paste0('y1.',1:l1); y1=data.matrix(dat[,nomes])
nomes=paste0('y2.',1:l2); y2=data.matrix(dat[,nomes])
y3=matrix(dat[,'y3'],n.tsegm,1)
n=apply(y2,1,sum)
#priors
a.theta3=b.theta3=0.1
psi=0.01
gamma1=0.1
lo=0.000000000000001
hi=1-lo
#starting values
nclustmax=10
z=sample(1:nclustmax,size=n.tsegm,replace=T)
theta1=matrix(1/l1,nclustmax,l1)
theta2=matrix(1/l2,nclustmax,l2)
theta3=rep(0.5,nclustmax)
phi=rep(1/nclustmax,nclustmax)
#store results
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,n.tsegm)
store.theta1=matrix(NA,ngibbs,nclustmax*l1)
store.theta2=matrix(NA,ngibbs,nclustmax*l2)
store.theta3=matrix(NA,ngibbs,nclustmax)
store.loglikel=matrix(NA,ngibbs,1)
#gibbs sampler
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta1=theta1[ind,]
theta2=theta2[ind,]
theta3=theta3[ind]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta1=sample.theta1(y1=y1,nclustmax=nclustmax,l1=l1,z=z,psi=psi)
theta1[theta1<lo]=lo #to avoid numerical issues
# theta1=theta1.true
theta2=sample.theta2(y2=y2,nclustmax=nclustmax,l2=l2,z=z,psi=psi)
theta2[theta2<lo]=lo #to avoid numerical issues
# theta2=theta2.true
theta3=sample.theta3(y3=y3,n=n,nclustmax=nclustmax,z=z,a.theta3=a.theta3,b.theta3=b.theta3)
theta3[theta3<lo]=lo #to avoid numerical issues
theta3[theta3>hi]=hi #to avoid numerical issues
# theta3=theta3.true
z=sample.z(y1=y1,y2=y2,y3=y3,n=n,
ltheta1=log(theta1),ltheta2=log(theta2),ltheta3=log(theta3),l.1minus.theta3=log(1-theta3),
lphi=log(phi),z=z,
n.tsegm=n.tsegm,nclustmax=nclustmax,l1=l1,l2=l2,
a.theta3=a.theta3,b.theta3=b.theta3,psi=psi)
# z=z.true
#get logl
logl=sum(y1*log(theta1)[z,])+
sum(y2*log(theta2)[z,])+
sum(y3*log(theta3)[z]+(n-y3)*log(1-theta3[z]))
lprior=sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta1))+sum((psi-1)*log(theta2))+
sum((a.theta3-1)*log(theta3)+(b.theta3-1)*log(1-theta3))
#store results
store.loglikel[i]=logl+lprior
store.theta1[i,]=theta1
store.theta2[i,]=theta2
store.theta3[i,]=theta3
store.phi[i,]=phi
store.z[i,]=z
}
compare=function(true1,estim1){
rango=range(c(true1,estim1))
plot(true1,estim1,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
}
compare(theta1.true,theta1[1:5,])
fim=data.frame(zestim=z,ztrue=z.true)
table(fim)
fim=data.frame(zestim=z,ztrue=z.true)
fim1=table(fim); fim1
ordem=c(5,3,2,1,4)
fim1[ordem,]
fim=data.frame(zestim=z,ztrue=z.true)
fim1=table(fim); fim1
ordem=c(4,3,2,1,5)
fim1[ordem,]
fim1=table(fim); fim1
fim=data.frame(zestim=z,ztrue=z.true)
fim1=table(fim); fim1
ordem=c(4,3,2,5,1)
fim1[ordem,]
compare(theta1.true,theta1[ordem,])
compare(theta2.true,theta2[ordem,])
compare(theta3.true,theta3[ordem])
plot(phi,type='h')
rm(list=ls(all=TRUE))
set.seed(3)
#basic settings
nclust=8
l1=8; l2=6
n.tsegm=200
n=floor(runif(n.tsegm,min=20,max=200))
#parameters
theta1=matrix(runif(nclust*l1),nclust,l1)
theta1.true=theta1=theta1/apply(theta1,1,sum); apply(theta1,1,sum)
theta2=matrix(runif(nclust*l2),nclust,l2)
theta2.true=theta2=theta2/apply(theta2,1,sum); apply(theta2,1,sum)
theta3.true=theta3=runif(nclust)
z.true=z=sample(nclust,size=n.tsegm,replace=T)
#generate data
y1=matrix(NA,n.tsegm,l1)
y2=matrix(NA,n.tsegm,l2)
y3=rep(NA,n.tsegm)
for (i in 1:n.tsegm){
y1[i,]=rmultinom(1,size=n[i],prob=theta1[z[i],])
y2[i,]=rmultinom(1,size=n[i],prob=theta2[z[i],])
y3[i]=rbinom(1,size=n[i],prob=theta3[z[i]])
}
image(y1[z==1,]/n[z==1])
image(y2[z==1,]/n[z==1])
hist(y3[z==3]/n[z==3])
#combinate datasets
colnames(y1)=paste0('y1.',1:l1)
colnames(y2)=paste0('y2.',1:l2)
fim=cbind(y1,y2,y3)
setwd('U:\\GIT_models\\cluster_tsegments_behavior')
write.csv(fim,'fake data.csv',row.names=F)
library('MCMCpack')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\cluster_tsegments_behavior')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
l1=8;l2=6;
n.tsegm=nrow(dat)
nomes=paste0('y1.',1:l1); y1=data.matrix(dat[,nomes])
nomes=paste0('y2.',1:l2); y2=data.matrix(dat[,nomes])
y3=matrix(dat[,'y3'],n.tsegm,1)
n=apply(y2,1,sum)
#priors
a.theta3=b.theta3=0.1
psi=0.01
gamma1=0.1
lo=0.000000000000001
hi=1-lo
#starting values
nclustmax=20
z=sample(1:nclustmax,size=n.tsegm,replace=T)
theta1=matrix(1/l1,nclustmax,l1)
theta2=matrix(1/l2,nclustmax,l2)
theta3=rep(0.5,nclustmax)
phi=rep(1/nclustmax,nclustmax)
#store results
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,n.tsegm)
store.theta1=matrix(NA,ngibbs,nclustmax*l1)
store.theta2=matrix(NA,ngibbs,nclustmax*l2)
store.theta3=matrix(NA,ngibbs,nclustmax)
store.loglikel=matrix(NA,ngibbs,1)
#gibbs sampler
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta1=theta1[ind,]
theta2=theta2[ind,]
theta3=theta3[ind]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta1=sample.theta1(y1=y1,nclustmax=nclustmax,l1=l1,z=z,psi=psi)
theta1[theta1<lo]=lo #to avoid numerical issues
# theta1=theta1.true
theta2=sample.theta2(y2=y2,nclustmax=nclustmax,l2=l2,z=z,psi=psi)
theta2[theta2<lo]=lo #to avoid numerical issues
# theta2=theta2.true
theta3=sample.theta3(y3=y3,n=n,nclustmax=nclustmax,z=z,a.theta3=a.theta3,b.theta3=b.theta3)
theta3[theta3<lo]=lo #to avoid numerical issues
theta3[theta3>hi]=hi #to avoid numerical issues
# theta3=theta3.true
z=sample.z(y1=y1,y2=y2,y3=y3,n=n,
ltheta1=log(theta1),ltheta2=log(theta2),ltheta3=log(theta3),l.1minus.theta3=log(1-theta3),
lphi=log(phi),z=z,
n.tsegm=n.tsegm,nclustmax=nclustmax,l1=l1,l2=l2,
a.theta3=a.theta3,b.theta3=b.theta3,psi=psi)
# z=z.true
#get logl
logl=sum(y1*log(theta1)[z,])+
sum(y2*log(theta2)[z,])+
sum(y3*log(theta3)[z]+(n-y3)*log(1-theta3[z]))
lprior=sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta1))+sum((psi-1)*log(theta2))+
sum((a.theta3-1)*log(theta3)+(b.theta3-1)*log(1-theta3))
#store results
store.loglikel[i]=logl+lprior
store.theta1[i,]=theta1
store.theta2[i,]=theta2
store.theta3[i,]=theta3
store.phi[i,]=phi
store.z[i,]=z
}
plot(phi,type='h')
fim=data.frame(zestim=z,ztrue=z.true)
fim1=table(fim); fim1
plot(phi,type='h')
fim=data.frame(zestim=z,ztrue=z.true)
fim1=table(fim); fim1
ordem=c(1,8,3,5,6,4,2,7)
fim1[ordem,]
compare=function(true1,estim1){
rango=range(c(true1,estim1))
plot(true1,estim1,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
}
compare(theta1.true,theta1[ordem,])
compare(theta2.true,theta2[ordem,])
compare(theta3.true,theta3[ordem])
# rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\cluster_tsegments_behavior')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
dat=read.csv('fake data.csv',as.is=T)
#priors
a.theta3=b.theta3=0.1
psi=0.01
gamma1=0.1
#starting values
nclustmax=20
# rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\cluster_tsegments_behavior')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
#priors
a.theta3=b.theta3=0.1
psi=0.01
gamma1=0.1
#basic settings
nclustmax=20
ngibbs=1000
nburn=ngibbs/2
#run gibbs sampler
res=cluster.tsegm.behavior(dat=dat,a.theta3=a.theta3,b.theta3=b.theta3,psi=psi,gamma1=gamma1,
nclustmax=nclustmax,ngibbs=ngibbs,nburn=nburn)
z=sample(1:nclustmax,size=n.tsegm,replace=T)
theta1=matrix(1/l1,nclustmax,l1)
theta2=matrix(1/l2,nclustmax,l2)
theta3=rep(0.5,nclustmax)
phi=rep(1/nclustmax,nclustmax)
#store results
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,n.tsegm)
store.theta1=matrix(NA,ngibbs,nclustmax*l1)
store.theta2=matrix(NA,ngibbs,nclustmax*l2)
store.theta3=matrix(NA,ngibbs,nclustmax)
store.loglikel=matrix(NA,ngibbs,1)
#gibbs sampler
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta1=theta1[ind,]
theta2=theta2[ind,]
theta3=theta3[ind]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta1=sample.theta1(y1=y1,nclustmax=nclustmax,l1=l1,z=z,psi=psi)
theta1[theta1<lo]=lo #to avoid numerical issues
# theta1=theta1.true
theta2=sample.theta2(y2=y2,nclustmax=nclustmax,l2=l2,z=z,psi=psi)
theta2[theta2<lo]=lo #to avoid numerical issues
# theta2=theta2.true
theta3=sample.theta3(y3=y3,n=n,nclustmax=nclustmax,z=z,a.theta3=a.theta3,b.theta3=b.theta3)
theta3[theta3<lo]=lo #to avoid numerical issues
theta3[theta3>hi]=hi #to avoid numerical issues
# theta3=theta3.true
z=sample.z(y1=y1,y2=y2,y3=y3,n=n,
ltheta1=log(theta1),ltheta2=log(theta2),ltheta3=log(theta3),l.1minus.theta3=log(1-theta3),
lphi=log(phi),z=z,
n.tsegm=n.tsegm,nclustmax=nclustmax,l1=l1,l2=l2,
a.theta3=a.theta3,b.theta3=b.theta3,psi=psi)
# z=z.true
#get logl
logl=sum(y1*log(theta1)[z,])+
sum(y2*log(theta2)[z,])+
sum(y3*log(theta3)[z]+(n-y3)*log(1-theta3[z]))
lprior=sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta1))+sum((psi-1)*log(theta2))+
sum((a.theta3-1)*log(theta3)+(b.theta3-1)*log(1-theta3))
#store results
store.loglikel[i]=logl+lprior
store.theta1[i,]=theta1
store.theta2[i,]=theta2
store.theta3[i,]=theta3
store.phi[i,]=phi
store.z[i,]=z
}
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\cluster_tsegments_behavior')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
#priors
a.theta3=b.theta3=0.1
psi=0.01
gamma1=0.1
#basic settings
nclustmax=20
ngibbs=1000
nburn=ngibbs/2
#run gibbs sampler
res=cluster.tsegm.behavior(dat=dat,a.theta3=a.theta3,b.theta3=b.theta3,psi=psi,gamma1=gamma1,
nclustmax=nclustmax,ngibbs=ngibbs,nburn=nburn)
z=sample(1:nclustmax,size=n.tsegm,replace=T)
theta1=matrix(1/l1,nclustmax,l1)
theta2=matrix(1/l2,nclustmax,l2)
theta3=rep(0.5,nclustmax)
phi=rep(1/nclustmax,nclustmax)
#store results
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,n.tsegm)
store.theta1=matrix(NA,ngibbs,nclustmax*l1)
store.theta2=matrix(NA,ngibbs,nclustmax*l2)
store.theta3=matrix(NA,ngibbs,nclustmax)
store.loglikel=matrix(NA,ngibbs,1)
#gibbs sampler
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta1=theta1[ind,]
theta2=theta2[ind,]
theta3=theta3[ind]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta1=sample.theta1(y1=y1,nclustmax=nclustmax,l1=l1,z=z,psi=psi)
theta1[theta1<lo]=lo #to avoid numerical issues
# theta1=theta1.true
theta2=sample.theta2(y2=y2,nclustmax=nclustmax,l2=l2,z=z,psi=psi)
theta2[theta2<lo]=lo #to avoid numerical issues
# theta2=theta2.true
theta3=sample.theta3(y3=y3,n=n,nclustmax=nclustmax,z=z,a.theta3=a.theta3,b.theta3=b.theta3)
theta3[theta3<lo]=lo #to avoid numerical issues
theta3[theta3>hi]=hi #to avoid numerical issues
# theta3=theta3.true
z=sample.z(y1=y1,y2=y2,y3=y3,n=n,
ltheta1=log(theta1),ltheta2=log(theta2),ltheta3=log(theta3),l.1minus.theta3=log(1-theta3),
lphi=log(phi),z=z,
n.tsegm=n.tsegm,nclustmax=nclustmax,l1=l1,l2=l2,
a.theta3=a.theta3,b.theta3=b.theta3,psi=psi)
# z=z.true
#get logl
logl=sum(y1*log(theta1)[z,])+
sum(y2*log(theta2)[z,])+
sum(y3*log(theta3)[z]+(n-y3)*log(1-theta3[z]))
lprior=sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta1))+sum((psi-1)*log(theta2))+
sum((a.theta3-1)*log(theta3)+(b.theta3-1)*log(1-theta3))
#store results
store.loglikel[i]=logl+lprior
store.theta1[i,]=theta1
store.theta2[i,]=theta2
store.theta3[i,]=theta3
store.phi[i,]=phi
store.z[i,]=z
}
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\cluster_tsegments_behavior')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
#priors
a.theta3=b.theta3=0.1
psi=0.01
gamma1=0.1
#basic settings
nclustmax=20
ngibbs=1000
nburn=ngibbs/2
#run gibbs sampler
res=cluster.tsegm.behavior(dat=dat,a.theta3=a.theta3,b.theta3=b.theta3,psi=psi,gamma1=gamma1,
nclustmax=nclustmax,ngibbs=ngibbs,nburn=nburn)
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\cluster_tsegments_behavior')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs functions.R')
source('gibbs sampler.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
#priors
a.theta3=b.theta3=0.1
psi=0.01
gamma1=0.1
#basic settings
nclustmax=20
ngibbs=1000
nburn=ngibbs/2
#run gibbs sampler
res=cluster.tsegm.behavior(dat=dat,a.theta3=a.theta3,b.theta3=b.theta3,psi=psi,gamma1=gamma1,
nclustmax=nclustmax,ngibbs=ngibbs,nburn=nburn)
plot(res$phi[ngibbs,],type='h')
fim=data.frame(zestim=res$z[ngibbs,],ztrue=z.true)
fim1=table(fim); fim1
set.seed(3)
#basic settings
nclust=8
l1=8; l2=6
n.tsegm=200
n=floor(runif(n.tsegm,min=20,max=200))
#parameters
theta1=matrix(runif(nclust*l1),nclust,l1)
theta1.true=theta1=theta1/apply(theta1,1,sum); apply(theta1,1,sum)
theta2=matrix(runif(nclust*l2),nclust,l2)
theta2.true=theta2=theta2/apply(theta2,1,sum); apply(theta2,1,sum)
theta3.true=theta3=runif(nclust)
z.true=z=sample(nclust,size=n.tsegm,replace=T)
#generate data
y1=matrix(NA,n.tsegm,l1)
y2=matrix(NA,n.tsegm,l2)
y3=rep(NA,n.tsegm)
for (i in 1:n.tsegm){
y1[i,]=rmultinom(1,size=n[i],prob=theta1[z[i],])
y2[i,]=rmultinom(1,size=n[i],prob=theta2[z[i],])
y3[i]=rbinom(1,size=n[i],prob=theta3[z[i]])
}
image(y1[z==1,]/n[z==1])
image(y2[z==1,]/n[z==1])
hist(y3[z==3]/n[z==3])
#combinate datasets
colnames(y1)=paste0('y1.',1:l1)
colnames(y2)=paste0('y2.',1:l2)
fim=cbind(y1,y2,y3)
fim=data.frame(zestim=res$z[ngibbs,],ztrue=z.true)
fim1=table(fim); fim1
ordem=c(1,8,3,5,6,4,2,7)
fim1[ordem,]
theta1=matrix(res$theta1[ngibbs,],nrow=nclustmax)
compare(theta1.true,theta1[ordem,])
compare=function(true1,estim1){
rango=range(c(true1,estim1))
plot(true1,estim1,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
}
compare(theta1.true,theta1[ordem,])
theta2=matrix(res$theta2[ngibbs,],nrow=nclustmax)
compare(theta2.true,theta2[ordem,])
theta3=matrix(res$theta3[ngibbs,],nrow=nclustmax)
compare(theta3.true,theta3[ordem])
